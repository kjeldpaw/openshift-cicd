apiVersion": v1
kind: Template
labels: {}
metadata:
  annotations:
    description: This template deploys a pipeline to the defined namespace
    iconClass: icon-java
  labels: {}
  name: pipeline-template
parameters:
  - name: APP_NAME
    displayName: Application Name
    required: true
    description: The name assigned to the application.
  - name: APP_NAMESPACE
    displayName: Application namespace
    required: true
    description: The name of the assigned namespace.
  - name: GIT_REPO
    displayName: Git repository
    required: true
    description: Git repository.
  - name: GIT_REF
    displayName: Git reference
    required: true
    description: Git reference to build.
  - name: GIT_SECRET
    displayName: Git secret
    description: Git secret.
  - name: BUILD_SECRET
    generate: expression
    description: The secret needed to trigger the build
    from: "[a-zA-Z0-9]{8}"
objects:
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-pipeline
    spec:
      runPolicy: Serial
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        sourceSecret:
          name: ${GIT_SECRET}
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfile: |-
            node('maven') {
              stage ('clone') {
                  git branch: '${GIT_REF}', url:'${GIT_REPO}', credentialsId: '${APP_NAMESPACE}-${GIT_SECRET}'
              }
              stage('build') {
                openshift.withCluster() {
                  openshift.withProject('${APP_NAMESPACE}') {

                    def pom = readMavenPom file: 'pom.xml'
                    def appVersion = pom.version

                    def imageStream = openshift.selector('imagestream', 'map')
                    if(imageStream.count() == 0) {
                      imageStream = openshift.process(readFile(file:'openshift/imagestream-template.json'), '-p', "APP_NAME=${APP_NAME}", "-p", "APP_VERSION=" + appVersion)
                    }

                    def imageStreamObject = imageStream.object()
                    imageStreamObject.metadata.labels.version.set(appVersion)
                  }
                }
              }
            }
