apiVersion: v1
kind: Template
labels: {}
metadata:
  annotations:
    description: This template deploys a pipeline to the defined namespace
    iconClass: icon-java
  labels: {}
  name: pipeline-template
parameters:
  - name: APP_NAME
    displayName: Application Name
    required: true
    description: The name assigned to the application.
  - name: APP_NAMESPACE
    displayName: Application namespace
    required: true
    description: The name of the assigned namespace.
  - name: GIT_REPO
    displayName: Git repository
    required: true
    description: Git repository.
  - name: GIT_REF
    displayName: Git reference
    required: true
    description: Git reference to build.
  - name: GIT_SECRET
    displayName: Git secret
    description: Git secret.
  - name: BUILD_SECRET
    generate: expression
    description: The secret needed to trigger the build
    from: "[a-zA-Z0-9]{8}"
objects:
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APP_NAME}-pipeline
    spec:
      runPolicy: Serial
      source:
        git:
          ref: ${GIT_REF}
          uri: ${GIT_REPO}
        sourceSecret:
          name: ${GIT_SECRET}
        type: Git
      strategy:
        jenkinsPipelineStrategy:
          type: JenkinsPipeline
          jenkinsfile: |-
            node('maven') {
              stage ('clone') {
                  git branch: '${GIT_REF}', url:'${GIT_REPO}', credentialsId: '${APP_NAMESPACE}-${GIT_SECRET}'
              }
              stage ('build application') {
                sh 'mvn -DskipTests=true clean package -s configuration/settings.xml'
              }
              stage('build image') {
                sh 'mkdir -p deployments'
                sh 'cp target/*.jar deployments/'

                def pom = readMavenPom file: 'pom.xml'
                def appVersion = pom.version

                def is = openshift.selector('is', '${APP_NAME}')
                def s2iImageStreamObject = openshift.process(readFile(file:'openshift/imagestream-template.yml'), '-p', 'APP_NAME=${APP_NAME}', '-p', 'APP_NAMESPACE=${APP_NAMESPACE)', '-p', 'APP_VERSION=' + appVersion)
                if (is.count() == 0) {
                  openshift.create(s2iImageStreamObject)
                } else {
                  openshift.apply(s2iImageStreamObject)
                }

                def bc = openshift.selector('bc', '${APP_NAME}')
                def s2iBuildConfigObject = openshift.process(readFile(file:'openshift/buildconfig-template.yml'), '-p', 'APP_NAME=${APP_NAME}', '-p', 'APP_VERSION=' + appVersion)
                def s2iBuildConfig = bc.count() == 0 ? openshift.create(s2iBuildConfigObject) : openshift.apply(s2iBuildConfigObject)
                def buildConfig = s2iBuildConfig.narrow('bc')

                buildConfig.startBuild('--from-dir=deployments')
                def builds = buildConfig.related('builds')
                timeout(2) {
                  builds.untilEach(1) {
                    return it.object().status == 'Complete'
                  }
                }
                openshift.tag('${APP_NAMESPACE}/${APP_NAME}:latest', '${APP_NAMESPACE}/${APP_NAME}:' + appVersion)
              }
              stage('deploy') {

              }
            }
