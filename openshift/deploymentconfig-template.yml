apiVersion: v1
kind: Template
labels:
  template: deploymentconfig-template
metadata:
  annotations:
    description: Template for creating a deployment config.
  creationTimestamp: null
  name: deploymentconfig-template
parameters:
  - name: APP_NAME
    displayName: Application Name
    required: true
    description: The name assigned to the application.
  - name: APP_VERSION
    displayName: Application Version
    required: true
    description: The version assigned to the application.
  - name: APP_NAMESPACE
    displayName: Application namespace
    required: true
    description: The name of the assigned namespace.
  - name: REPLICA_COUNT
    description: Number of replicas to run
    value: "1"
    required: true
  - name: REGISTRY_URL
    description: ip:port for the internal docker registry
    required: true
objects:
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: deploymentconfig-template
    creationTimestamp: null
    generation: 1
    labels:
      component: ${APP_NAME}
      group: ${APP_NAMESPACE}
      app: ${APP_NAME}
      provider: s2i
      version: ${APP_VERSION}
    name: ${APP_NAME}
  spec:
    replicas: ${{REPLICA_COUNT}}
    selector:
      app: ${APP_NAME}
      deploymentconfig: ${APP_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: deploymentconfig-template
        creationTimestamp: null
        labels:
          app: ${APP_NAME}
          deploymentconfig: ${APP_NAME}
      spec:
        containers:
        - image: ${REGISTRY_URL}/${APP_NAMESPACE}/${APP_NAME}:${APP_VERSION}
          imagePullPolicy: Always
          name: ${APP_NAME}
          ports:
          - containerPort: 8080
            protocol: TCP
          - containerPort: 8443
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
    test: false
    triggers: []